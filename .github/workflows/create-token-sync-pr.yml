name: Create PR for Figma Token sync

on:
  push:
    branches:
      - "figma-token-sync"

env:
  BRANCH_NAME: figma-token-sync

jobs:
  run-style-dictionary:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      GITHUB_SHA: ${{ steps.commit.outputs.GITHUB_SHA }}
      GITHUB_REF: ${{ steps.commit.outputs.GITHUB_REF }}

    steps:
      - name: Configure git
        run: |
          git config --global core.autocrlf true
          git config --global user.name "${{ secrets.GIT_USERNAME }}"
          git config --global user.email "${{ secrets.GIT_EMAIL }}"

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout branch
        run: |
          git checkout -B "$BRANCH_NAME"

      - name: Install Style Dictionary
        run: |
          npm install -g style-dictionary

      - name: Run Style Dictionary
        run: |
          npm run sd-build
          git add --all

      - name: Commit the changes
        id: commit
        run: |
          git commit -m "Update design tokens with Style Dictionary"
          echo "GITHUB_SHA=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
          echo "GITHUB_REF=$(git rev-parse --symbolic-full-name HEAD)" >> "$GITHUB_OUTPUT"
          git push -u -f origin "$BRANCH_NAME"

  create-pr:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      PR_BRANCH_NAME: figma-token-sync

    steps:
      - name: Create PR for Figma Token sync
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { PR_BRANCH_NAME } = process.env;
            const title = `Update Figma Tokens`;
            const body = `Update Figma Tokens`;

            const head = `${context.repo.owner}:${process.env.PR_BRANCH_NAME}`;

            const {
              data: [pr],
            } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head,
            });

            if (!pr) {
              const { data } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head,
                base: 'main',
                body,
                title,
              });
              console.log('Created PR', data.html_url);
            } else {
              const { data } = await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                body,
                title,
              });
              console.log('Updated PR', data.html_url);
            }
